generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model ItineraryItem {
  id          Int       @id @default(autoincrement())
  order       Int
  title       String
  description String?
  startTime   DateTime?
  endTime     DateTime?
  address     String?
  reservation Json //{isNeeded: boolean  isReserved:boolean}
  itineraryId Int // Foreign key relationship with Intinerary
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
  tags        String[] //brunch or cafe or attraction etc
  image       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Itinerary {
  id            Int             @id @default(autoincrement())
  date          DateTime
  items         ItineraryItem[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  checkList     Json?
  destinationId Int
  destination   Destination     @relation(fields: [destinationId], references: [id])
}

model Destination {
  id        Int         @id @default(autoincrement())
  cityId    Int
  city      City        @relation(fields: [cityId], references: [id])
  startDate DateTime
  endDate   DateTime
  items     Itinerary[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tripId    Int
  trip      Trip        @relation(fields: [tripId], references: [id])
}

model Trip {
  id             Int           @id @default(autoincrement())
  title          String
  startDate      DateTime
  endDate        DateTime
  items          Destination[]
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  image          Int?
  numberOfPeople Int
  relationship   String?
  totalBudget    String?
  editors        String[] //user ids that are editor for this trip
  status         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model City {
  id          Int           @id @default(autoincrement())
  name        String
  lat         String
  lng         String
  country     String?
  countryCode String?
  population  Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       Destination[]
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  items     Trip[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
